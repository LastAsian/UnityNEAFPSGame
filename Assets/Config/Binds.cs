//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Config/Binds.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Binds: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Binds()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Binds"",
    ""maps"": [
        {
            ""name"": ""GameSpaceInput"",
            ""id"": ""e777e23c-42bc-4277-9904-57758de28711"",
            ""actions"": [
                {
                    ""name"": ""CardinalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""b7a3cfdb-7e98-4118-9b1f-493fde23fe4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b3ec8722-7813-43a4-b7a3-86f2ce225309"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""Value"",
                    ""id"": ""3a9fa23f-ba3a-4066-b93c-3f6179c3fb99"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e21ff37a-716e-4426-9923-5d7a04176f07"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardinalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""52da02c3-886a-44ea-a027-48037bcd9bf1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardinalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""75b5ceb7-3923-4029-b9d0-d52cc1ff2216"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardinalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5ff097bd-7446-4957-84ce-3a97eb133318"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardinalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""32c56cca-138c-4137-9aa6-89abc088895c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardinalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fd3b7ab8-4384-4652-810f-1f89151e8367"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49135d82-2972-474b-840c-b508ee4268dc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ef9ad17-6e49-4d78-b32d-d9283296b619"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c831424-22d8-4368-90bd-1cb2929b0912"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameSpaceInput
        m_GameSpaceInput = asset.FindActionMap("GameSpaceInput", throwIfNotFound: true);
        m_GameSpaceInput_CardinalMovement = m_GameSpaceInput.FindAction("CardinalMovement", throwIfNotFound: true);
        m_GameSpaceInput_Movement = m_GameSpaceInput.FindAction("Movement", throwIfNotFound: true);
        m_GameSpaceInput_Pointer = m_GameSpaceInput.FindAction("Pointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameSpaceInput
    private readonly InputActionMap m_GameSpaceInput;
    private List<IGameSpaceInputActions> m_GameSpaceInputActionsCallbackInterfaces = new List<IGameSpaceInputActions>();
    private readonly InputAction m_GameSpaceInput_CardinalMovement;
    private readonly InputAction m_GameSpaceInput_Movement;
    private readonly InputAction m_GameSpaceInput_Pointer;
    public struct GameSpaceInputActions
    {
        private @Binds m_Wrapper;
        public GameSpaceInputActions(@Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @CardinalMovement => m_Wrapper.m_GameSpaceInput_CardinalMovement;
        public InputAction @Movement => m_Wrapper.m_GameSpaceInput_Movement;
        public InputAction @Pointer => m_Wrapper.m_GameSpaceInput_Pointer;
        public InputActionMap Get() { return m_Wrapper.m_GameSpaceInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameSpaceInputActions set) { return set.Get(); }
        public void AddCallbacks(IGameSpaceInputActions instance)
        {
            if (instance == null || m_Wrapper.m_GameSpaceInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameSpaceInputActionsCallbackInterfaces.Add(instance);
            @CardinalMovement.started += instance.OnCardinalMovement;
            @CardinalMovement.performed += instance.OnCardinalMovement;
            @CardinalMovement.canceled += instance.OnCardinalMovement;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Pointer.started += instance.OnPointer;
            @Pointer.performed += instance.OnPointer;
            @Pointer.canceled += instance.OnPointer;
        }

        private void UnregisterCallbacks(IGameSpaceInputActions instance)
        {
            @CardinalMovement.started -= instance.OnCardinalMovement;
            @CardinalMovement.performed -= instance.OnCardinalMovement;
            @CardinalMovement.canceled -= instance.OnCardinalMovement;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Pointer.started -= instance.OnPointer;
            @Pointer.performed -= instance.OnPointer;
            @Pointer.canceled -= instance.OnPointer;
        }

        public void RemoveCallbacks(IGameSpaceInputActions instance)
        {
            if (m_Wrapper.m_GameSpaceInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameSpaceInputActions instance)
        {
            foreach (var item in m_Wrapper.m_GameSpaceInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameSpaceInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameSpaceInputActions @GameSpaceInput => new GameSpaceInputActions(this);
    public interface IGameSpaceInputActions
    {
        void OnCardinalMovement(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnPointer(InputAction.CallbackContext context);
    }
}
